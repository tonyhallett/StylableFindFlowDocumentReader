root = true

# C# files
[*.cs]

# Do not report unused parameters as handled by Rolynator as it includes ctor parameters
dotnet_diagnostic.IDE0060.severity = none

# Roslynator
dotnet_diagnostic.RCS1163.severity = warning
dotnet_diagnostic.RCS1036.severity = none
dotnet_diagnostic.RCS1265.severity = warning # Remove redundant catch block
dotnet_diagnostic.RCS1208.severity = warning # Reduce 'if' nesting
dotnet_diagnostic.RCS1218.severity = warning # Simplify code branching
dotnet_diagnostic.RCS0054.severity = warning # Fix formatting of a call chain
dotnet_diagnostic.RCS1201.severity = warning # Use method chaining
dotnet_diagnostic.RCS1061.severity = warning # Merge 'if' with nested 'if'
dotnet_diagnostic.RCS1015.severity = warning # Use nameof operator
dotnet_diagnostic.RCS1146.severity = warning # Use conditional access


dotnet_diagnostic.IDE0001.severity = error # simplify name
dotnet_diagnostic.IDE0004.severity = error # remove unnecessary cast
dotnet_diagnostic.IDE0005.severity = error # remove unnecessary import 
dotnet_diagnostic.IDE0040.severity = error # accessibility modifiers
dotnet_style_require_accessibility_modifiers = always

dotnet_analyzer_diagnostic.category-Naming.severity = error # code analysis - naming conventions 
dotnet_analyzer_diagnostic.category-Design.severity = error
# maintainability
# does not work - dotnet_analyzer_diagnostic.category-Maintainability.severity = error
dotnet_diagnostic.CA1501.severity = error # Avoid excessive inheritance
dotnet_diagnostic.CA1502.severity = error # Avoid excessive complexity - todo configure
dotnet_diagnostic.CA1505.severity = error # Avoid unmaintainable code - todo configure
dotnet_diagnostic.CA1506.severity = error # Avoid excessive class coupling - todo configure
dotnet_diagnostic.CA1509.severity = error # Invalid entry in code metrics configuration file

dotnet_diagnostic.CA1507.severity = error # Use nameof in place of string
dotnet_diagnostic.CA1508.severity = error # Avoid dead conditional code

dotnet_diagnostic.CA1510.severity = error # Use ArgumentNullException throw helper
dotnet_diagnostic.CA1511.severity = error # Use ArgumentException throw helper
dotnet_diagnostic.CA1512.severity = error # Use ArgumentOutOfRangeException throw helper
dotnet_diagnostic.CA1513.severity = error # Use ObjectDisposedException throw helper

dotnet_diagnostic.CA1514.severity = error # Avoid redundant length argument
dotnet_diagnostic.CA1515.severity = error # Consider making public types internal
# performance rules
dotnet_diagnostic.CA1860.severity = error # Avoid using 'Enumerable.Any()'
dotnet_diagnostic.CA1861.severity = error # Avoid constant arrays as arguments
dotnet_code_quality.CA1852.ignore_internalsvisibleto = true
dotnet_diagnostic.CA1852.severity = error # Seal internal types
dotnet_diagnostic.CA1822.severity = error # Mark members as static
dotnet_code_quality.CA1822.api_surface = private, internal
# naming rules
dotnet_diagnostic.CA1715.severity = error # Identifiers should have correct prefix


# StyleCop
# disagrees with the C# coding conventions
# A call to an instance member of the local class or a base class is not prefixed with 'this.', within a C# code file.
dotnet_diagnostic.SA1101.severity = none

# disagrees with the C# coding conventions - csharp_using_directive_placement = outside_namespace:error
# A C# using directive is placed outside of a namespace element.
dotnet_diagnostic.SA1200.severity = none

# documentation
# A C# code element is missing a documentation header.
dotnet_diagnostic.SA1600.severity = none
# A C# code file is missing a standard file header.
dotnet_diagnostic.SA1633.severity = none
# An item within a C# enumeration is missing an Xml documentation header.
dotnet_diagnostic.SA1602.severity = none
# A C# partial element is missing a documentation header.
dotnet_diagnostic.SA1602.severity = none

# naming - "none" as they disagree with the C# coding conventions
# A field name in C# begins with an underscore.
dotnet_diagnostic.SA1309.severity = none
# A field name in C# is prefixed with m_, s_, or t_.
dotnet_diagnostic.SA1308.severity = none
# The name of a static readonly field does not begin with an upper-case letter.
dotnet_diagnostic.SA1311.severity = none
# The name of a variable in C# does not begin with a lower-case letter.
dotnet_diagnostic.SA1312.severity = none


# ordering - todo
# An element within a C# code file is out of order in relation to the other elements in the code.
dotnet_diagnostic.SA1201.severity = none
# An element within a C# code file is out of order within regard to access level, in relation to other elements in the code.
dotnet_diagnostic.SA1202.severity = none
# A static element is positioned beneath an instance element of the same type.
dotnet_diagnostic.SA1204.severity = none

# The C# code contains a region - todo
dotnet_diagnostic.SA1124.severity = none

# A closing brace within a C# element, statement, or expression is preceded by a blank line.
# disagrees with - insert_final_line = true
dotnet_diagnostic.SA1508.severity = none


#### Core EditorConfig Options ####

trim_trailing_whitespace = true

# Indentation and spacing
indent_size = 4
indent_style = space
tab_width = 4

# New line preferences
end_of_line = crlf
insert_final_newline = true

#### .NET Coding Conventions ####

# Organize usings
dotnet_separate_import_directive_groups = false
dotnet_sort_system_directives_first = true
file_header_template = unset

# this. and Me. preferences
dotnet_style_qualification_for_event = false:error
dotnet_style_qualification_for_field = false:error
dotnet_style_qualification_for_method = false:error
dotnet_style_qualification_for_property = false:error
dotnet_diagnostic.IDE0009.severity = error

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:error
dotnet_style_predefined_type_for_member_access = true:error

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:error
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:error
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:error
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:error

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members

# Expression-level preferences
dotnet_style_coalesce_expression = true:error
dotnet_style_collection_initializer = true:error
dotnet_style_explicit_tuple_names = true:error
dotnet_style_namespace_match_folder = true:error
dotnet_diagnostic.IDE0130.severity= warning # dotnet_style_namespace_match_folder 
dotnet_style_null_propagation = true:error
dotnet_style_object_initializer = true:error
dotnet_style_operator_placement_when_wrapping = beginning_of_line
dotnet_style_prefer_auto_properties = true:error
dotnet_style_prefer_collection_expression = when_types_loosely_match
dotnet_style_prefer_compound_assignment = true:error
dotnet_style_prefer_conditional_expression_over_assignment = true:error
dotnet_style_prefer_conditional_expression_over_return = true:error
dotnet_style_prefer_foreach_explicit_cast_in_source = when_strongly_typed
dotnet_style_prefer_inferred_anonymous_type_member_names = true:error
dotnet_style_prefer_inferred_tuple_names = true:error
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:error
dotnet_style_prefer_simplified_boolean_expressions = true:error
dotnet_style_prefer_simplified_interpolation = true

# Field preferences
dotnet_style_readonly_field = true:error

# Parameter preferences
dotnet_code_quality_unused_parameters = all:error

# Suppression preferences
dotnet_remove_unnecessary_suppression_exclusions = none

# New line preferences
dotnet_style_allow_multiple_blank_lines_experimental = false:error
dotnet_style_allow_statement_immediately_after_block_experimental = false:error

#### C# Coding Conventions ####

# var preferences
csharp_style_var_elsewhere = false:error
csharp_style_var_for_built_in_types = false:error
csharp_style_var_when_type_is_apparent = false:none

# Expression-bodied members
csharp_style_expression_bodied_accessors = true:error
#dotnet_diagnostic.IDE0027.severity = error
csharp_style_expression_bodied_constructors = true:error
#dotnet_diagnostic.IDE0021.severity = error
csharp_style_expression_bodied_indexers = true:error
#dotnet_diagnostic.IDE0026.severity = error
csharp_style_expression_bodied_lambdas = true:error
#dotnet_diagnostic.IDE0053.severity = error
csharp_style_expression_bodied_local_functions = true:error
#dotnet_diagnostic.IDE0061.severity = error
csharp_style_expression_bodied_methods = true:error
#dotnet_diagnostic.IDE0022.severity = error
csharp_style_expression_bodied_operators = true:error
#dotnet_diagnostic.IDE0023.severity = error
#dotnet_diagnostic.IDE0024.severity = error
csharp_style_expression_bodied_properties = true:error
#dotnet_diagnostic.IDE0025.severity = error
dotnet_diagnostic.IDE0082.severity = error # Convert typeof to nameof

# Pattern matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true:error
csharp_style_pattern_matching_over_is_with_cast_check = true:error
csharp_style_prefer_extended_property_pattern = true
csharp_style_prefer_not_pattern = true:error
csharp_style_prefer_pattern_matching = true:error
csharp_style_prefer_switch_expression = true:error

# Null-checking preferences
csharp_style_conditional_delegate_call = true:error

# Modifier preferences
csharp_prefer_static_local_function = true:error
csharp_preferred_modifier_order = public,private,protected,internal,file,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,required,volatile,async
csharp_style_prefer_readonly_struct = true:error
csharp_style_prefer_readonly_struct_member = true

# Code-block preferences
csharp_prefer_braces = when_multiline:error
csharp_prefer_simple_using_statement = true:error
csharp_style_namespace_declarations = block_scoped
csharp_style_prefer_method_group_conversion = true:error
csharp_style_prefer_primary_constructors = true
csharp_style_prefer_top_level_statements = true

# Expression-level preferences
csharp_prefer_simple_default_expression = true:error
csharp_style_deconstructed_variable_declaration = true:error
csharp_style_implicit_object_creation_when_type_is_apparent = true:error
csharp_style_inlined_variable_declaration = true:error
csharp_style_prefer_index_operator = true:error
csharp_style_prefer_local_over_anonymous_function = true:error
csharp_style_prefer_null_check_over_type_check = true:error
csharp_style_prefer_range_operator = true:error
csharp_style_prefer_tuple_swap = true:error
csharp_style_prefer_utf8_string_literals = true
csharp_style_throw_expression = true:error
csharp_style_unused_value_assignment_preference = discard_variable:error
csharp_style_unused_value_expression_statement_preference = discard_variable:error

# 'using' directive preferences
csharp_using_directive_placement = outside_namespace:error

# New line preferences
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = false:error
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = false:error
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = true:error
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = false:error
csharp_style_allow_embedded_statements_on_same_line_experimental = true:error

#### C# Formatting Rules ####

# New line preferences
csharp_new_line_before_catch = true
csharp_new_line_before_else = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = all
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = false
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
# note that false disagrees with the C# coding conventions - they have do_not_ignore which is not mentioned in the docs as a valid value
# looking at the source code, the "ignore" option value is matched against - any other value is considered "do not ignore" 
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true

#### Naming styles ####

# Naming rules

dotnet_naming_rule.interface_should_be_begins_with_i.severity = warning
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_rule.types_should_be_pascal_case.severity = warning
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

# name all constant fields using PascalCase
dotnet_naming_rule.constant_fields_should_be_pascal_case.severity = warning
dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols  = constant_fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.style    = pascal_case

# Define the 'private_fields_underscored' naming rule
dotnet_naming_rule.camel_case_for_private_internal_fields.severity = warning
dotnet_naming_rule.camel_case_for_private_internal_fields.symbols  = private_internal_fields
dotnet_naming_rule.camel_case_for_private_internal_fields.style    = camel_case_underscore_style

# static fields should have a prefix 's_'
dotnet_naming_rule.static_fields_should_have_prefix.severity = warning
dotnet_naming_rule.static_fields_should_have_prefix.symbols  = static_fields
dotnet_naming_rule.static_fields_should_have_prefix.style    = static_prefix_style


# Symbol specifications

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers = 

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers = 

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers = 

# private internal fields
dotnet_naming_symbols.private_internal_fields.applicable_kinds = field
dotnet_naming_symbols.private_internal_fields.applicable_accessibilities = private, internal

# const fields
dotnet_naming_symbols.constant_fields.applicable_kinds   = field
dotnet_naming_symbols.constant_fields.required_modifiers = const

# Define the 'static_fields' symbol group
dotnet_naming_symbols.static_fields.applicable_kinds   = field
dotnet_naming_symbols.static_fields.required_modifiers = static
dotnet_naming_symbols.static_fields.applicable_accessibilities = private, internal, private_protected

# Naming styles

dotnet_naming_style.pascal_case.required_prefix = 
dotnet_naming_style.pascal_case.required_suffix = 
dotnet_naming_style.pascal_case.word_separator = 
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix = 
dotnet_naming_style.begins_with_i.word_separator = 
dotnet_naming_style.begins_with_i.capitalization = pascal_case

# ( for private internal fields )
dotnet_naming_style.camel_case_underscore_style.required_prefix = _
dotnet_naming_style.camel_case_underscore_style.capitalization = camel_case

# ( for static fields )
dotnet_naming_style.static_prefix_style.required_prefix = s_
dotnet_naming_style.static_prefix_style.capitalization = camel_case
